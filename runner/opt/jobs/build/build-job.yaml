# https://github.com/moby/buildkit/tree/master/examples/kubernetes
apiVersion: batch/v1
kind: Job
metadata:
  name: pipeline-{{.Env.K8SCI_GID}}-job-build-{{.Env.K8SCI_CONTEXT}}
  labels:
    app.kubernetes.io/managed-by: k8sci
    k8sci/gid: "{{.Env.K8SCI_GID}}"
    k8sci/type: job
    k8sci/job: build
    k8sci/package: {{.Env.K8SCI_CONTEXT}}
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 3600
  ttlSecondsAfterFinished: 1800
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/buildkit: unconfined
        container.seccomp.security.alpha.kubernetes.io/buildkit: unconfined
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      restartPolicy: Never
      initContainers:
        - name: git-clone-repo
          image: alpine/git:v2.30.0
          command:
            - sh
            - -c
            - |
              git clone \
                --depth 1 \
                {{ .Env.K8SCI_REPOSITORY }} \
                --branch {{ .Env.K8SCI_BRANCH }} \
                --single-branch \
                /workspace
              cd /workspace
              git tag --points-at HEAD>/workspace/.git/CURRENT_COMMIT_TAG
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: workspace
              mountPath: /workspace
        - name: docker-login
          image: alpine:3
          env:
            - name: DOCKER_CONFIG
              value: /home/user/.docker
            - name: REGISTRY_USER
              valueFrom:
                secretKeyRef:
                  name: {{.Env.K8SCI_REGISTRY_SECRET_NAME}}
                  key: {{.Env.K8SCI_REGISTRY_USER_KEY}}
            - name: REGISTRY_PASS
              valueFrom:
                secretKeyRef:
                  name: {{.Env.K8SCI_REGISTRY_SECRET_NAME}}
                  key: {{.Env.K8SCI_REGISTRY_PASS_KEY}}
            - name: REGISTRY_CACHE_USER
              valueFrom:
                secretKeyRef:
                  name: {{.Env.K8SCI_REGISTRY_CACHE_SECRET_NAME}}
                  key: {{.Env.K8SCI_REGISTRY_CACHE_USER_KEY}}
            - name: REGISTRY_CACHE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{.Env.K8SCI_REGISTRY_CACHE_SECRET_NAME}}
                  key: {{.Env.K8SCI_REGISTRY_CACHE_PASS_KEY}}
          command:
            - sh
            - -c
            - |
              if [ "{{.Env.K8SCI_REGISTRY_CACHE_URL}}" = "{{.Env.K8SCI_REGISTRY_CACHE_PUSH_PATH}}" ]; then
                echo '{"auths":{"{{.Env.K8SCI_REGISTRY_URL}}":{"username":"'$REGISTRY_USER'","password":"'$REGISTRY_PASS'"}}}' > /home/user/.docker/config.json
              else
                echo '{"auths":{"{{.Env.K8SCI_REGISTRY_URL}}":{"username":"'$REGISTRY_USER'","password":"'$REGISTRY_PASS'"},"{{.Env.K8SCI_REGISTRY_CACHE_URL}}":{"username":"'$REGISTRY_CACHE_USER'","password":"'$REGISTRY_CACHE_PASS'"}}}' > /home/user/.docker/config.json
              fi
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: home-docker
              mountPath: /home/user/.docker
      containers:
        - name: buildkit
          image: {{ .Env.K8SCI_BUILDKIT_IMAGE }}:{{ .Env.K8SCI_BUILDKIT_TAG }}
          env:
            - name: BUILDKITD_FLAGS
              value: --oci-worker-no-process-sandbox
            - name: BUILD_ARGS
              value: {{ .Env.K8SCI_BUILD_ARGS }}
          command:
            - /bin/sh
            - -c
            - |
              OUTPUT_IMAGE="{{.Env.K8SCI_REGISTRY_URL}}/{{.Env.K8SCI_REGISTRY_PUSH_PATH}}:{{.Env.K8SCI_REGISTRY_PUSH_TAG}}"
              CURRENT_COMMIT_TAG=$(cat .git/CURRENT_COMMIT_TAG)
              if [ -n "$CURRENT_COMMIT_TAG" ]; then
                OUTPUT_IMAGE="$OUTPUT_IMAGE,{{.Env.K8SCI_REGISTRY_URL}}/{{.Env.K8SCI_REGISTRY_PUSH_PATH}}:$CURRENT_COMMIT_TAG"
              fi
              buildctl-daemonless.sh \
                build \
                --frontend dockerfile.v0 \
                --local context=/workspace/{{ .Env.K8SCI_BUILD_CONTEXT }} \
                --local dockerfile=/workspace/{{ .Env.K8SCI_BUILD_DOCKERFILE }} \
                --output type=image,\"name=$OUTPUT_IMAGE\",push=true \
                --export-cache mode=max,type=registry,ref={{.Env.K8SCI_REGISTRY_CACHE_URL}}/{{.Env.K8SCI_REGISTRY_CACHE_PUSH_PATH}}:{{.Env.K8SCI_REGISTRY_CACHE_TAG}} \
                --import-cache type=registry,ref={{.Env.K8SCI_REGISTRY_CACHE_URL}}/{{.Env.K8SCI_REGISTRY_CACHE_PUSH_PATH}}:{{.Env.K8SCI_REGISTRY_CACHE_TAG}} \
                {{ env.Getenv "BUILD_ARGS" }}

          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: workspace
              readOnly: true
              mountPath: /workspace
            - name: home-docker
              mountPath: /home/user/.docker
              readOnly: false

      volumes:
        - name: workspace
          emptyDir: {}
        - name: home-docker
          emptyDir: {}