# https://github.com/moby/buildkit/tree/master/examples/kubernetes
apiVersion: batch/v1
kind: Job
metadata:
  name: build-job-{{.Env.JOB_ID}}
spec:
  backoffLimit: 2
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/buildkit: unconfined
        container.seccomp.security.alpha.kubernetes.io/buildkit: unconfined
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      restartPolicy: Never
      initContainers:
        - name: git-clone-repo
          image: {{ .Env.GITCLONE_IMAGE }}:{{ .Env.GITCLONE_TAG }}
          command:
            - sh
            - -c
            - |
              git clone \
                --depth 1 \
                {{ .Env.GIT_REPOSITORY }} \
                --branch {{ .Env.GIT_BRANCH }} \
                --single-branch \
                /workspace
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: workspace
              mountPath: /workspace
        - name: docker-login
          image: alpine:3
          env:
            - name: DOCKER_CONFIG
              value: /home/user/.docker
            - name: REGISTRY_USER
              valueFrom:
                secretKeyRef:
                  name: {{.Env.REGISTRY_SECRET_NAME}}
                  key: {{.Env.REGISTRY_USER_KEY}}
            - name: REGISTRY_PASS
              valueFrom:
                secretKeyRef:
                  name: {{.Env.REGISTRY_SECRET_NAME}}
                  key: {{.Env.REGISTRY_PASS_KEY}}
            - name: REGISTRY_CACHE_USER
              valueFrom:
                secretKeyRef:
                  name: {{.Env.REGISTRY_CACHE_SECRET_NAME}}
                  key: {{.Env.REGISTRY_CACHE_USER_KEY}}
            - name: REGISTRY_CACHE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{.Env.REGISTRY_CACHE_SECRET_NAME}}
                  key: {{.Env.REGISTRY_CACHE_PASS_KEY}}
          command:
            - sh
            - -c
            - |
              if [ "{{.Env.REGISTRY_CACHE_URL}}" = "{{.Env.REGISTRY_CACHE_PUSH_PATH}}" ]; then
                echo '{"auths":{"{{.Env.REGISTRY_URL}}":{"username":"'$REGISTRY_USER'","password":"'$REGISTRY_PASS'"}}}' > /home/user/.docker/config.json
              else
                echo '{"auths":{"{{.Env.REGISTRY_URL}}":{"username":"'$REGISTRY_USER'","password":"'$REGISTRY_PASS'"},"{{.Env.REGISTRY_CACHE_URL}}":{"username":"'$REGISTRY_CACHE_USER'","password":"'$REGISTRY_CACHE_PASS'"}}}' > /home/user/.docker/config.json
              fi
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: home-docker
              mountPath: /home/user/.docker
      containers:
        - name: buildkit
          image: {{ .Env.BUILDKIT_IMAGE }}:{{ .Env.BUILDKIT_TAG }}
          env:
            - name: BUILDKITD_FLAGS
              value: --oci-worker-no-process-sandbox
          command:
            - /bin/sh
            - -c
            - |

              {{ if ne (env.Getenv "CI_PRE_BUILD_SCRIPT") "" }}
              source /workspace/{{.Env.CI_PRE_BUILD_SCRIPT}}
              {{ end }}

              buildctl-daemonless.sh \
                build \
                --frontend dockerfile.v0 \
                --local context=/workspace/{{ .Env.BUILD_CONTEXT }} \
                --local dockerfile=/workspace/{{ .Env.BUILD_DOCKERFILE }} \
                --output type=image,name={{.Env.REGISTRY_URL}}/{{.Env.REGISTRY_PUSH_PATH}}:{{.Env.REGISTRY_PUSH_TAG}},push=true \
                --export-cache mode=max,type=registry,ref={{.Env.REGISTRY_CACHE_URL}}/{{.Env.REGISTRY_CACHE_PUSH_PATH}}:{{.Env.REGISTRY_CACHE_TAG}} \
                --import-cache type=registry,ref={{.Env.REGISTRY_CACHE_URL}}/{{.Env.REGISTRY_CACHE_PUSH_PATH}}:{{.Env.REGISTRY_CACHE_TAG}} \
                {{ env.Getenv "BUILD_ARGS" }}

              {{ if ne (env.Getenv "CI_POST_BUILD_SCRIPT") "" }}
              source /workspace/{{.Env.CI_POST_BUILD_SCRIPT}}
              {{ end }}

              {{ if ne (env.Getenv "CI_NEXT_WEBHOOK") "" }}
              source /workspace/{{.Env.CI_POST_BUILD_SCRIPT}}
              {{ end }}
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          volumeMounts:
            - name: workspace
              readOnly: true
              mountPath: /workspace
            - name: home-docker
              mountPath: /home/user/.docker
              readOnly: false

      volumes:
        - name: workspace
          emptyDir: {}
        - name: home-docker
          emptyDir: {}